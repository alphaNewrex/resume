name: Build LaTeX Resumes

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_latex:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p output

      # Install TeX Live with all necessary packages
      - name: Install TeX Live
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-xetex \
            texlive-luatex \
            texlive-lang-english \
            latexmk \
            cm-super

      # List all relevant files for debugging
      - name: Debug file structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in professional directory:"
          find ./professional -type f | grep -v ".git" | sort
          echo "Files in academic directory:"
          find ./academic -type f | grep -v ".git" | sort

      # Compile Professional Resume
      - name: Compile Professional Resume
        run: |
          cd professional
          echo "Running pdflatex for professional resume..."
          pdflatex -interaction=nonstopmode main.tex
          echo "Running bibtex if bibliography exists..."
          if grep -q '\\bibliography{' main.tex; then
            bibtex main
            pdflatex -interaction=nonstopmode main.tex
          fi
          echo "Running pdflatex again for references..."
          pdflatex -interaction=nonstopmode main.tex
          echo "Professional resume compilation finished"
          cp main.pdf ../output/professional_resume.pdf || exit 1

      # Compile Academic Resume
      - name: Compile Academic Resume
        run: |
          cd academic
          echo "Running pdflatex for academic resume..."
          pdflatex -interaction=nonstopmode main.tex
          echo "Running bibtex if bibliography exists..."
          if grep -q '\\bibliography{' main.tex; then
            bibtex main
            pdflatex -interaction=nonstopmode main.tex
          fi
          echo "Running pdflatex again for references..."
          pdflatex -interaction=nonstopmode main.tex
          echo "Academic resume compilation finished"
          cp main.pdf ../output/academic_resume.pdf || exit 1

      # Show output directory contents
      - name: List output directory
        run: ls -la output/

      # Upload PDFs as artifacts
      - name: Upload PDFs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-resumes
          path: output/*.pdf
          if-no-files-found: warn

      # Check if .gitignore is ignoring PDFs
      - name: Check .gitignore
        run: |
          echo "Checking if .gitignore exists and contains output/*.pdf"
          if [ -f ".gitignore" ]; then
            cat .gitignore
            echo ""
            if grep -q "output/" .gitignore || grep -q "*.pdf" .gitignore; then
              echo "Found rules that might be ignoring PDFs"
            fi
          else
            echo "No .gitignore file found"
          fi

      # Commit PDFs to a separate branch
      - name: Commit and push PDFs to output branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Create and switch to the output branch
          git fetch --all
          git checkout -B gh-actions/output

          # Force add PDFs
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -f output/*.pdf

          # Commit and push to the output branch
          git commit -m "Update compiled resume PDFs" || echo "No changes to commit"
          git push -f origin gh-actions/output

  update_website:
    needs: build_latex
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download compiled resumes
        uses: actions/download-artifact@v4
        with:
          name: compiled-resumes
          path: ./resumes

      - name: List downloaded files
        run: ls -la ./resumes

      - name: Checkout personal website repository
        uses: actions/checkout@v4
        with:
          repository: alphaNewrex/alphanewrex.github.io
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: website

      - name: Create resume branch and update website
        run: |
          # Navigate to website repository
          cd website

          # Create and switch to resume branch
          git checkout -B gh-actions/resume

          # Create public folder if it doesn't exist
          mkdir -p public

          # Copy the professional resume to the public folder
          cp ../resumes/professional_resume.pdf public/

          # Rename the professional resume to resume.pdf
          mv public/professional_resume.pdf public/resume.pdf

          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/professional_resume.pdf
          git commit -m "Update resume" || echo "No changes to commit"
          git push -f origin gh-actions/resume
